#include <iostream>
#include <omp.h>
using namespace std;

void bubbleSortParallel(int arr[], int size) {
    int i, j;
    bool swapped;
    
    #pragma omp parallel shared(arr, size, swapped) private(i, j)
    {
        for (i = 0; i < size - 1; i++) {
            swapped = false;
            
            #pragma omp for
            for (j = 0; j < size - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap(arr[j], arr[j + 1]);
                    swapped = true;
                }
            }
            
            #pragma omp critical
            {
                if (!swapped) {
                    // If no elements were swapped in this iteration, the array is already sorted.
                    // Hence, we can terminate early to improve performance.
                    break;
                }
            }
        }
    }
}

int main() {
    int arr[] = {64, 34, 25, 12, 22, 11, 90};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    cout << "Array before sorting: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    
    start_time = omp_get_wtime();
    bubbleSortParallel(arr, size);
    end_time = omp_get_wtime();
    
    cout << "\nArray after sorting: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    
    return 0;
}